/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== roveDeviceTemplate.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

BIOS.heapSize = 20480;
Task.idleTaskStackSize = 768;

/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
    Program.stack = 2048;
}

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 128;
System.SupportProxy = SysMin;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ NDK configuration ================ */
var Ndk       = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Ip        = xdc.useModule('ti.ndk.config.Ip');
var Udp       = xdc.useModule('ti.ndk.config.Udp');

Global.IPv6 = false;
Global.stackLibType = Global.MIN;
//Global.networkOpenHook = "&netOpenHook";

/* automatically call fdOpen/CloseSession for our sockets Task */
Global.autoOpenCloseFD = true;

Global.pktNumFrameBufs = 10;
Global.memRawPageCount = 6;
Global.ndkThreadStackSize = 1536;
Global.lowTaskStackSize = 1024;
Global.normTaskStackSize = 1024;
Global.highTaskStackSize = 1024;


/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useEMAC = true;
TIRTOS.useGPIO = true;
Ip.autoIp = false;
Ip.address = "192.168.1.51";
Ip.mask = "255.255.255.0";
TIRTOS.useUART = true;
var task1Params = new Task.Params();
task1Params.instance.name = "roveThreadTivaTask";
task1Params.priority = 3;
Program.global.roveThreadTivaTask = Task.create("&roveThread_TivaTask", task1Params);
TIRTOS.useWatchdog = true;
Global.netSchedulerPri = Global.NC_PRIORITY_HIGH;
Ip.socketConnectTimeout = 3;
Ip.domainName = "";
Ip.socketBufMinTxSize = 1;
TIRTOS.usePWM = true;
TIRTOS.useSPI = true;
TIRTOS.useI2C = true;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "clock0";
clock0Params.period = 100;
clock0Params.arg = "&cl0";
Program.global.clock0 = Clock.create("&clockPrd", 0, clock0Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "clock1";
clock1Params.period = 1000;
clock1Params.arg = "&cl1";
Program.global.clock1 = Clock.create("&clockPrd", null, clock1Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "sem0";
Program.global.sem0 = Semaphore.create(1, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "sem1";
Program.global.sem1 = Semaphore.create(1, semaphore1Params);
var task1Params0 = new Task.Params();
task1Params0.instance.name = "task0";
task1Params0.vitalTaskFlag = false;
task1Params0.priority = 1;
task1Params0.stackSize = 2048;
task1Params0.arg0 = "&cl3";
Program.global.task0 = Task.create("&clockTask", task1Params0);
var task2Params = new Task.Params();
task2Params.instance.name = "task1";
task2Params.priority = 1;
task2Params.arg0 = "&cl4";
Program.global.task1 = Task.create("&clockTask", task2Params);


Idle.addFunc("&clockIdle");
