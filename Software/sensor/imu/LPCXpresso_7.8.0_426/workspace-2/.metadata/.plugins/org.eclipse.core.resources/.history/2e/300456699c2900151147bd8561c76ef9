#ifndef __I2C_H_
#define __I2C_H_

#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include "board.h"

#define BUFFER_LENGTH 32
#define I2C_FASTPLUS_BIT     0
#define SPEED_100KHZ         100000
#define SPEED_400KHZ         400000
static int mode_poll;	// Poll/Interrupt mode flag

class Wire {
private:
	static uint8_t rxBuffer[];
	static uint8_t rxBufferIndex;
	static uint8_t rxBufferLength;

	static uint8_t txAddress;
	static uint8_t txBuffer[];
	static uint8_t txBufferIndex;
	static uint8_t txBufferLength;

	static uint8_t transmitting;
public:
	// Constructor
	Wire();

	// Init Wire object with default parameters
	void init();

	// Set transmitting, set address, reset buffer index and length
	void beginTransmission(uint8_t);

	// Reset transmitting, reset buffer index and length, send stop if necessary
	uint8_t endTransmission(uint8_t);

	// Load data in buffer, inc buffer index/length
	size_t write(uint8_t);

	// Fill Rx buffer with result of requestFrom
	int read(void);

	// Return true if not receiving data
	int isAvailable(void);

	void i2cSetMode(I2C_ID_T id, int polling) {
		if (!polling) { // Set mode to interrupt
				mode_poll &= ~(1 << id);
				Chip_I2C_SetMasterEventHandler(id, Chip_I2C_EventHandler);
				NVIC_EnableIRQ(I2C0_IRQn);
			} else { // Set mode to polling
				mode_poll |= 1 << id;
				NVIC_DisableIRQ(I2C0_IRQn);
				Chip_I2C_SetMasterEventHandler(id, Chip_I2C_EventHandlerPolling);
			}
	}
};

extern Wire i2c;

#endif /* __I2C_H__ */
