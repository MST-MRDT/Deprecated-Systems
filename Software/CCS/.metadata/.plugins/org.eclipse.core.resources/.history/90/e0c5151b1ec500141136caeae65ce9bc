/*
 * roveStructTransfer.c
 *
 *  Created on: Mar 7, 2015
 *      Author: Connor Walsh
 */

#include "../mrdtRoveWare.h"

// New struct transfer to fill a buffer with a easy transfer frame

void buildSerialStructMessage(void* my_struct, enum peripheral_devices device, char* buffer)
{
	uint8_t size;
	uint8_t start_byte1 = 0x06;
	uint8_t start_byte2 = 0x85;

	switch(device)
	{
		case motor_controller:
			size = sizeof(*((struct motor_control_struct*)my_struct));
		break;

		case robotic_arm:
			size = sizeof(*((struct arm_control_struct*)my_struct));
		break;

		case gripper:
			size = sizeof(*((struct gripper_control_struct*)my_struct));
		break;

		case drill:
			size = sizeof(*((struct drill_Controls*)my_struct));
		break;

		case science_payload:
			size =  sizeof(*((struct science_payload_control_struct*)my_struct));
		break;

		case lighting_board:
			size =  sizeof(*((struct lighting_board_struct*)my_struct));
		break;

		case camera:
			size =  sizeof(*((struct camera_control_struct*)my_struct));
		break;

		case test:
			size =  sizeof(*((struct test_device_data_struct*)my_struct));
		break;
		// TODO Add default case here later
	} // End Switch (device)

	uint8_t checkSum = size;

	buffer[0] = start_byte1;
	buffer[1] = start_byte2;
	buffer[2] = size;

	// copy the struct into the buffer starting at byte 3
	memcpy(buffer + 3, my_struct, size);

	checkSum = CalcCheckSum(my_struct, size);

	// 3 for two start bytes and size byte plus size of struct to get final position
	buffer[3 + size] = checkSum;
} // end Function

uint8_t CalcCheckSum(const void* my_struct, uint8_t size)
{
	uint8_t checkSum = size;
	uint8_t i;

	for(i = 0; i < size; i++)
		checkSum ^= *(my_struct + i);

	return checkSum;
}
