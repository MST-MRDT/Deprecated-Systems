//	TODO: Port To Fresh Build (using TI example:			This version educational practice not for distro)
//
// roveTcpHandler.c
//
// first created:
//
// 01_22_2015_Owen_Chiaventone
//
// last edited:
//
//02_24_2015_Judah Schad_jrs6w7@mst.edu

//	this implements a single function BIOS thread that acts as the RoverMotherboard.cfg roveTelemCntrl handle
//
//	recieves a request for telem from the command thread,
//
//	requests telem from the device,
//
//	recieves telem from the device,
//
//	and posts telem to the roveTCPHandler thread

#include "roveIncludes/roveTelemCntrl.h"

//BIOS_start inits this as the roveTelemCntrlTask Thread

//This is a RoverMotherboard.cfg object::		roveTelemCntrlTask		::		priority 1, vital_flag = t, 2048 persistent private stack

Void roveTelemCntrl(UArg arg0, UArg arg1){

	//external ref the scope for global uart handles

	extern UART_Handle uart0;
	extern UART_Handle uart1;
	extern UART_Handle uart2;
	extern UART_Handle uart3;
	extern UART_Handle uart4;
	extern UART_Handle uart5;
	extern UART_Handle uart6;
	extern UART_Handle uart7;

	//init RoveCom signal struct

	signal_telem_control_struct signal_telem_struct;

	//init RoveCom recieve data struct

	struct test_device_data_struct test_device_data_struct;

	//init RoveCom send data struct

	//struct package_telem_struct package_telem_struct;

	bool test_telem_is_valid = false;

	while(1){

		//clean the struct for command signaling    .id and .sig are enum

		signal_telem_struct.id = null_device;

		signal_telem_struct.sig = null_signal;

		//clean the struct for uart read     		.id is enum 	.value is uint8_t

		//the struct is (packed)

		test_device_data_struct.id = null_device;

		test_device_data_struct.value = 0;


/*TODO

		//mux to the device, pause a millisecond, then read the uart

		mux_1( 9 );
		ms_delay( 1 );
		test_telem_is_valid = recv_struct(uart1, &test_device_data_struct, test);

		if(test_telem_is_valid){

			package_telem_struct.id = test_device_data_struct.id;

			package_telem_struct.value = test_device_data_struct.value;

			Mailbox_post(toBaseStationMailbox, &package_telem_struct, BIOS_WAIT_FOREVER);

		}else{

			System_printf("test_telem_is_valid is invalid!");
			Task_exit();

		}//endif(test_telem_is_valid)

		mux_2( 10 );
		ms_delay( 1 );
		test_telem_is_valid = recv_struct( uart1, &test_device_data_struct, test );

		if(test_telem_is_valid){

			System_printf("test_telem_is_valid is valid mux_2( 10 ) \n");
			System_flush();

			package_telem_struct.id = test_device_data_struct.id;
			package_telem_struct.value = test_device_data_struct.value;
			Mailbox_post(toBaseStationMailbox, &package_telem_struct, BIOS_WAIT_FOREVER);

		}else{

			System_printf("test_telem_is_valid is invalid!");
			Task_exit();

		}//endif(test_telem_is_valid)

		System_printf("roveTelemController has priority right now \n");
		System_flush();
*/
	}//endwhile:	(1)

	System_printf("roveTelemController task exit!");
	Task_exit();

}//endfnctn:		roveTelemContoller() Task Thread



